NaviB_mod = naiveBayes(classes ~ .,data = sim_est)
NaviB_mod$tables$x.1[2,1]
NaviB_mod$tables$x.2[3,2]
#add a decimal in front
NaviB_mod$apriori
predicty = data.frame(x.1 = .76,x.2 = -1.68)
predict(NaviB_mod, predicty, type = "raw")
install.packages("nnet")
#7.8
# load packages
library("MASS")
library("nnet")
library("klaR")
install.packages("klaR")
library("nnet")
library("klaR")
library("mlbench")
library("tibble")
# set seed
set.seed(77350)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 0100, cl = 4, sd = 1.5))
sim_val = as_tibble(mlbench.2dnormals(n = 1000, cl = 4, sd = 1.5))
# check data
sim_est
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
#7.7
# load packages
library("mlbench")
library("tibble")
library("klaR")
# set seed
set.seed(26031)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 100, cl = 3))
# change class names to A, B, and C
sim_est$classes = factor(dplyr::case_when(
sim_est$classes == 1 ~ "A",
sim_est$classes == 2 ~ "B",
sim_est$classes == 3 ~ "C"))
# check data
sim_est
NaviB_mod = NaiveBayes(classes ~ .,data = sim_est)
NaviB_mod$tables$x.1[2,1]
NaviB_mod$tables$x.2[3,2]
#add a decimal in front
NaviB_mod$apriori
predicty = data.frame(x.1 = .76,x.2 = -1.68)
predicty = data.frame(x.1 = .76,x.2 = -1.68)
predict(NaviB_mod, predicty, type = "raw")
#7.8
# load packages
library("MASS")
library("nnet")
library("klaR")
library("mlbench")
library("tibble")
# set seed
set.seed(77350)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 0100, cl = 4, sd = 1.5))
sim_val = as_tibble(mlbench.2dnormals(n = 1000, cl = 4, sd = 1.5))
# check data
sim_est
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
NavieB = NaiveBayes()
NavieB = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3)
?NaiveBayes
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3)),
MULTI = multinom(classes ~ ., data = sim_est)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1)/2),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1)/2, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1)/2),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1)/2),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1.1)/2),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/2, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/2),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/2),
MULTI = multinom(classes ~ ., data = sim_est)
)
predict(NaviB_mod, predicty, type = "raw")
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
c(1,1,1)/3
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
test_pred = map(modlist, predict, sim_val)#make predictions for each model using tst data
map_dbl(test_pred,calc_misclass, sim_val$classes)
library("caret")
# set seed
set.seed(77350)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 0100, cl = 4, sd = 1.5))
sim_val = as_tibble(mlbench.2dnormals(n = 1000, cl = 4, sd = 1.5))
# check data
sim_est
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
test_pred = map(modlist, predict, sim_val)#make predictions for each model using tst data
map_dbl(test_pred,calc_misclass, sim_val$classes)
#7.8
# load packages
library("MASS")
library("nnet")
library("klaR")
library("mlbench")
library("tibble")
library("caret")
library("tidyverse")
# set seed
set.seed(77350)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 0100, cl = 4, sd = 1.5))
sim_val = as_tibble(mlbench.2dnormals(n = 1000, cl = 4, sd = 1.5))
# check data
sim_est
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
test_pred = map(modlist, predict, sim_val)#make predictions for each model using tst data
map_dbl(test_pred,calc_misclass, sim_val$classes)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1)/),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1)/2),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1)),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)),
MULTI = multinom(classes ~ ., data = sim_est)
)
#7.8
# load packages
library("MASS")
library("nnet")
library("klaR")
library("mlbench")
library("tibble")
library("caret")
library("tidyverse")
# set seed
set.seed(77350)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 0100, cl = 4, sd = 1.5))
sim_val = as_tibble(mlbench.2dnormals(n = 1000, cl = 4, sd = 1.5))
# check data
sim_est
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
?lda
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior,
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
= c(1,1,1)/3
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1)/3, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1)/3),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1)/3),
MULTI = multinom(classes ~ ., data = sim_est)
)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
test_pred = map(modlist, predict, sim_val)#make predictions for each model using tst data
map_dbl(test_pred,calc_misclass, sim_val$classes)
#calculation for misclassification [est to val]
test_pred = map(modlist, predict, sim_val)#make predictions for each model using tst data
map_dbl(test_pred,calc_misclass$class, sim_val$classes)
test_pred
calc_misclass(act = sim_val$classes,test_pred[1])
#calculation for misclassification [est to val]
test_pred = map(modlist, predict, sim_est)#make predictions for each model using tst data
map_dbl(test_pred,calc_misclass$class, sim_est$classes)
#calculation for misclassification [est to val]
calc_misclass(sim_est$classes, predict(modlist[1], data=sim_est,type = "class"))
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[1], data=sim_val,type = "class"))
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[1], data=sim_val,type = "raw"))
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[1], data=sim_val,type = "raw"))
#7.8
# load packages
library("MASS")
library("nnet")
library("klaR")
library("mlbench")
library("tibble")
library("caret")
library("tidyverse")
# set seed
set.seed(77350)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 0100, cl = 4, sd = 1.5))
sim_val = as_tibble(mlbench.2dnormals(n = 1000, cl = 4, sd = 1.5))
# check data
sim_est
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
calc_misclass(sim_est$classes, predict(modlist[1], data=sim_est,type = "raw"))
#7.8
# load packages
library("MASS")
library("nnet")
library("klaR")
library("mlbench")
library("tibble")
library("caret")
library("tidyverse")
# set seed
set.seed(77350)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 0100, cl = 4, sd = 1.5))
sim_val = as_tibble(mlbench.2dnormals(n = 1000, cl = 4, sd = 1.5))
# check data
sim_est
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[1], data=sim_val,type = "raw"))
modlist[1]
NavieB = NaiveBayes(classes ~., data = sim_est)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(NavieB, data=sim_val,type = "raw"))
#calculation for misclassification [est to val]
calc_misclass(sim_est$classes, predict(NavieB, data=sim_est,type = "raw"))
#calculation for misclassification [est to val]
calc_misclass(sim_est$classes, predict(NavieB, data=sim_est))
#calculation for misclassification [est to val]
calc_misclass(sim_est$classes, predict(modlist[1], data=sim_est,type = "raw"))
calc_misclass(predict(mod_list[[3]], sim_val)$class, sim_val$classes)
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
calc_misclass(sim_est$classes, predict(modlist[1], data=sim_est,type = "raw"))
calc_misclass(predict(mod_list[[3]], sim_val)$class, sim_val$classes)
calc_misclass(predict(modlist[[3]], sim_val)$class, sim_val$classes)
calc_misclass(predict(modlist[[1]], sim_val)$class, sim_val$classes)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[[1]], sim_val)$class)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[[1]], sim_val)$classes)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[[1]], sim_val)$classes)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[[1]], sim_val)$class)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[[1]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[2]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[3]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[4]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[5]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[6]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[7]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[8]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[8]], sim_val))
# set seed
set.seed(66522)
# simulate dataset
sim_est = as_tibble(mlbench.2dnormals(n = 0100, cl = 4, sd = 1.5))
sim_val = as_tibble(mlbench.2dnormals(n = 1000, cl = 4, sd = 1.5))
# check data
sim_est
# helper function for misclassification rate
calc_misclass = function(act, pred) {
mean(act != pred)
}
modlist = list(
NavieB = NaiveBayes(classes ~., data = sim_est),
NavieB_Flat = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
NavieB_Flat_KDE = NaiveBayes(classes ~., data = sim_est, prior = c(1,1,1,1)/4, usekernel = T),
LDA = lda(classes ~., data = sim_est),
LDA_Flat = lda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
QDA = qda(classes ~., data = sim_est),
QDA_Flat = qda(classes ~., data = sim_est, prior = c(1,1,1,1)/4),
MULTI = multinom(classes ~ ., data = sim_est)
)
#calculation for misclassification [est to val]
calc_misclass(sim_val$classes, predict(modlist[[1]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[2]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[3]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[4]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[5]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[6]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[7]], sim_val)$class)
calc_misclass(sim_val$classes, predict(modlist[[8]], sim_val))
