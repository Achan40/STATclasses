plot(n, AIC_list, col = "Red")
#list of BIC values for knots 3:20
BIC.values = map_dbl(3:20, calc_mod_BIC)
#function to create list of AIC values
calc_mod_AIC = function(n) {
mod = lm(y ~ bs(x,n))
AIC(mod)
}
#list of AIC values for knots 3:20
AIC.values = map_dbl(3:20, calc_mod_AIC)
knots = 3:20
#create data frame so we can use gg plot
dat = data.frame(knots, BIC.values, AIC.values)
ggplot() +
geom_line(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_line(data = dat, aes(x = knots, y = AIC.values), color = 'green')
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green')
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green') +
labs()
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green') +
labs()
ggplot(xlab = "Value") +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green') +
labs()
ggplot(xlab = "Value") +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green') +
labs()
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green') +
xlab("value")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green') +
xlab("Knots")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green') +
xlab("Knots") +
ylab("Value")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values), color = 'blue', fill = 'BIC') +
geom_point(data = dat, aes(x = knots, y = AIC.values), color = 'green', fill = 'AIC') +
xlab("Knots") +
ylab("Value")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = "green") +
xlab("Knots") +
ylab("Value")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC", color = "blue"), color = "blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = "green") +
xlab("Knots") +
ylab("Value")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = "green") +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC")) +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC", color = "red")) +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC")) +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend", color = "Blue")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = "Green") +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = "Green") +
xlab("Knots") +
ylab("Value") +
#d
plot(x,y)
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = "Green") +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = c("Green","Blue") +
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = c("Green","Blue")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC")) +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = c("Green","Blue")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = c("Green","Blue")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot() +
geom_point(data = dat, aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(data = dat, aes(x = knots, y = AIC.values, fill = "AIC"), color = "Blue") +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot(data = dat) +
geom_point(aes(x = knots, y = BIC.values, fill = "BIC"), color = "Blue") +
geom_point(aes(x = knots, y = AIC.values, fill = "AIC"), color = "Blue") +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot(data = dat) +
geom_point(aes(x = knots, y = BIC.values, fill = "BIC"), color = "Green") +
geom_point(aes(x = knots, y = AIC.values, fill = "AIC"), color = "Blue") +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot(data = dat, color=cyl) +
geom_point(aes(x = knots, y = BIC.values, fill = "BIC")) +
geom_point(aes(x = knots, y = AIC.values, fill = "AIC")) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
ggplot(data = dat, aes(x = knots)) +
geom_point(aes(y = BIC.values)) +
geom_point(aes(y = AIC.values)) +
xlab("Knots") +
ylab("Value") +
labs(fill = "Legend")
colors = c("BIC" = "blue", "AIC" = "green")
ggplot(data = dat, aes(x = knots)) +
geom_point(aes(y = BIC.values, color = "BIC")) +
geom_point(aes(y = AIC.values, color = "AIC")) +
labs(x = "Knots", y = "Value", color = "Legend") +
scale_color_manual(values = colors)
#a
mod1 = lm(lpsa ~ ., data = prostate)
options(warn=-1)
suppressPackageStartupMessages({
library(faraway)
library(ggplot2)
library(splines)
library(tidyverse)
})
#Problem 1
data("prostate")
#a
mod1 = lm(lpsa ~ ., data = prostate)
back.elm = step(mod1, lpsa ~ ., direction = "backward")
library(leaps)
#b
rsub = regsubsets(lpsa ~ ., data = prostate)
AIC = nrow(prostate)*log((summary(rsub))$rss/nrow(prostate))+(2:9)*2
AIC
options(warn=-1)
suppressPackageStartupMessages({
library(faraway)
library(ggplot2)
library(splines)
library(leaps)
library(tidyverse)
})
#Problem 1
data("prostate")
#a
mod1 = lm(lpsa ~ ., data = prostate)
back.elm = step(mod1, lpsa ~ ., direction = "backward")
back.elm
#b
rsub = regsubsets(lpsa ~ ., data = prostate)
Aic = nrow(prostate)*log((summary(rsub))$rss/nrow(prostate))+(2:9)*2
Aic
#c
plot(2:9,(summary(sub))$adjr2,main="Parameters vs. Adjusted R-Square",xlab="Parameters",ylab="Adjusted R-Square")
#c
plot(2:9, (summary(rsub))$adjr2, main = "Parameters vs. Adjusted R-Square", xlab = "Parameters", ylab = "Adjusted R-Square")
which.max(summary(rsub)$adjr2)
max(summary(rsub)$adjr2)
#d
summary(rsub)$cp
#This does not account for intercept
(summary(rsub)$cp[1:8])+coef(mod)[1]
#d
summary(rsub)$cp
#This does not account for intercept
(summary(rsub)$cp[1:8])+coef(mod1)[1]
ggplot(data = dat, aes(x = knots)) +
geom_point(aes(y = BIC.values, color = "BIC")) +
geom_point(aes(y = AIC.values, color = "AIC")) +
labs(x = "Knots", y = "Value", color = "Legend") +
scale_color_manual(values = colors)
#Problem 2
#a
set.seed(130)
fun = function(x) sin(2*pi*x^3)^3
x = seq(0,1,by=0.01)
y = fun(x) + 0.1*rnorm(101)
#spline
fit = lm(y ~ bs(x,12))
fhat = fit$fitted
fsum = summary(fit)
fsum
plot(x,y)
#spline fit line
lines(x,fhat,col = "Red")
#b
AIC(fit)
BIC(fit)
#c
#function to create list of BIC values
calc_mod_BIC = function(n) {
mod = lm(y ~ bs(x,n))
BIC(mod)
}
#list of BIC values for knots 3:20
BIC.values = map_dbl(3:20, calc_mod_BIC)
#function to create list of AIC values
calc_mod_AIC = function(n) {
mod = lm(y ~ bs(x,n))
AIC(mod)
}
#list of AIC values for knots 3:20
AIC.values = map_dbl(3:20, calc_mod_AIC)
knots = 3:20
#create data frame so we can use gg plot
dat = data.frame(knots, BIC.values, AIC.values)
options(warn=-1)
suppressPackageStartupMessages({
library(faraway)
library(ggplot2)
library(splines)
library(leaps)
library(tidyverse)
})
#Problem 1
data("prostate")
#a
mod1 = lm(lpsa ~ ., data = prostate)
back.elm = step(mod1, lpsa ~ ., direction = "backward")
back.elm
#b
msize = 2:9
n = nrow(prostate)
rsub = regsubsets(lpsa ~ ., data = prostate)
rs = summary(rsub)
Aic = n*log(rs$rss/n)+(msize)*2
Bic = n*log(rs$rss/n) + msize*log(n)
Aic
Bic
#c
plot(msize, rs$adjr2, main = "Parameters vs. Adjusted R-Square", xlab = "Parameters", ylab = "Adjusted R-Square")
which.max(rs$adjr2)
max(rs$adjr2)
min(Aic)
min(Bic)
#Problem 2
#a
set.seed(130)
fun = function(x) sin(2*pi*x^3)^3
x = seq(0,1,by=0.01)
y = fun(x) + 0.1*rnorm(101)
#spline
fit = lm(y ~ bs(x,12))
fhat = fit$fitted
fsum = summary(fit)
fsum
plot(x,y)
#spline fit line
lines(x,fhat,col = "Red")
#b
AIC(fit)
BIC(fit)
#c
#function to create list of BIC values
calc_mod_BIC = function(n) {
mod = lm(y ~ bs(x,n))
BIC(mod)
}
#list of BIC values for knots 3:20
BIC.values = map_dbl(3:20, calc_mod_BIC)
#function to create list of AIC values
calc_mod_AIC = function(n) {
mod = lm(y ~ bs(x,n))
AIC(mod)
}
#list of AIC values for knots 3:20
AIC.values = map_dbl(3:20, calc_mod_AIC)
knots = 3:20
#create data frame so we can use gg plot
dat = data.frame(knots, BIC.values, AIC.values)
#instead of reorganizing data, simply add manual colors to legend
colors = c("BIC" = "blue", "AIC" = "green")
ggplot(data = dat, aes(x = knots)) +
geom_point(aes(y = BIC.values, color = "BIC")) +
geom_point(aes(y = AIC.values, color = "AIC")) +
labs(x = "Knots", y = "Value", color = "Legend") +
scale_color_manual(values = colors)
#d
plot(x,y)
#instead of reorganizing data, simply add manual colors to legend
colors = c("BIC" = "blue", "AIC" = "green")
ggplot(data = dat, aes(x = knots)) +
geom_point(aes(y = BIC.values, color = "BIC")) +
geom_point(aes(y = AIC.values, color = "AIC")) +
labs(x = "Knots", y = "Value", color = "Legend") +
scale_color_manual(values = colors)
#checking for best model
min(AIC.values)
min(BIC.values)
#checking for best model
min(BIC.values)
min(AIC.values)
AIC.values
BIC.values
min(Bic)
min(Aic)
Bic
#d
#selected model is model with knots = 14
fitbest = lm(y ~ bs(x,14))
fhatbest = fit$fitted
summary(fitbest)
plot(x,y)
#spline fit line
lines(x,fhatbest,col = "Green")
library(VGAM)
#Problem 1
#Create data
GSS = data.frame(
Gender = c(rep("Male",2),rep("Female",2)),
Race = c(rep(c("White","Black"),2)),
Party = c(rep("D",4),rep("R",4),rep("I",4)),
Count = c(132,42,172,56,176,6,129,4,127,12,130,15)
)
GSS
#Create data
GSS = data.frame(
Gender = c(rep("Male",2),rep("Female",2)),
Race = c(rep(c("White","Black"),2)),
Party = c(rep("D",4),rep("R",4),rep("I",4)),
Count = c(132,42,172,56,176,6,129,4,127,12,130,15)
)
GSS
#Organize data
gss = reshape(GSS, v.names = "Count", timevar = "Party",
idvar = c("Gender","Race"), direction = "wide")
gss
#model
mod = vglm(cbind(Count.D, Count.R, Count.I) ~ Gender + Race, family = multinomial, data = gss)
#Independent is the baseline category in this case (we put it last)
summary(mod)
#problem 2
data(wbca)
library(faraway)
#problem 2
data(wbca)
head(wbca)
mod = glm(Class ~ ., family = binomial,data = wbca)
summary(mod)
mod$deviance
#b
modstep = step(mod, scope = list(upper=~., lower=~1))
summary(heartstepA)
summary(modstep)
#c
pred = factor(predict(mo1,type="response") > 0.5, labels = c("pred-Mal.","pred-Ben."))
#c
pred = factor(predict(mod,type="response") > 0.5, labels = c("pred-Mal.","pred-Ben."))
#c
pred = factor(predict(mod,type="response") > 0.5, labels = c("pred-Mal.","pred-Ben."))
library(faraway)
#Problem 2
#a
data(wbca)
mod = glm(Class ~ ., family = binomial,data = wbca)
summary(mod)
#Residual Deviance
mod$deviance
#b
#Backward regression
modstep = step(mod, scope = list(upper=~., lower=~1))
summary(modstep)
#c
pred = factor(predict(mod,type="response") > 0.5, labels = c("pred-Mal.","pred-Ben."))
table(pred,wbca$Class)
#c
pred = factor(predict(mod,type="response") > 0.5, labels = c("pred-Mal.","pred-Ben."))
pred.t = table(pred,wbca$Class)
pred.t
pred.t[1,2]
pred.t[2,1]
pred.t[2,1]/(pred.t[1,1]+pred.t[2,1])
#Using 0.5 as the cutoff, about 4.2% of the 238 patients with a malignant tumor categorized as false positives.
pred.t[1,2]/(pred.t[2,2]+pred.t[1,2])
#Problem 2
#a
data(wbca)
mod = glm(Class ~ ., family = binomial,data = wbca)
summary(mod)
#b
#Backward regression
modstep = step(mod, scope = list(upper=~., lower=~1))
summary(modstep)
summary(mod)
#Problem 1
#create matrix of data
tab1 = matrix(c(955,9,162,188),2,2)
#include totals in margins
tab = addmargins(tab1)
tab
tab[3,1]
tab[3,2]
tab[1,3]
tab[2,3]
tab[1,2]
tab[2,1]
#b
exp(log(tab[2,1]/tab[1,2]))
cor(Resort)
library(GGally)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary variables
Resort = subset(Resort, select = -c(arrival_date_year,arrival_date_week_number,arrival_date_day_of_month))
cor(Resort)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary variables
Resort = subset(Resort, select = -c(arrival_date_year,arrival_date_week_number,arrival_date_day_of_month))
View(Resort)
plot(Resort$lead_time,Resort$adr)
plot(Resort$stays_in_weekend_nights,Resort$adr)
plot(Resort$stays_in_week_nights,Resort$adr)
plot(Resort$adults,Resort$adr)
plot(Resort$children,Resort$adr)
plot(Resort$lead_time,Resort$adr)
#Testing Non-linearity in numerical variablees
plot(Resort$lead_time,Resort$adr, title = "a")
plot(Resort$lead_time,Resort$adr)
plot(Resort$stays_in_weekend_nights,Resort$adr)
plot(Resort$stays_in_week_nights,Resort$adr)
plot(Resort$total_of_special_requests,Resort$adr)
plot(Resort$lead_time,Resort$adr)
plot(Resort$stays_in_weekend_nights,Resort$adr)
plot(Resort$stays_in_week_nights,Resort$adr)
plot(Resort$total_of_special_requests,Resort$adr)
plot(Resort$stays_in_week_nights,Resort$adr)
plot(Resort$total_of_special_requests,Resort$adr)
plot(Resort$stays_in_weekend_nights,Resort$adr)
plot(Resort$lead_time,Resort$adr)
par(mfrow = c(2,2))
plot(Resort$lead_time,Resort$adr)
plot(Resort$stays_in_weekend_nights,Resort$adr)
plot(Resort$stays_in_week_nights,Resort$adr)
plot(Resort$total_of_special_requests,Resort$adr)
title("Figure 1", line = -21, outer = T)
title("Figure 1", line = -1, outer = T)
plot(Resort$lead_time,Resort$adr, ylab = "adr")
plot(Resort$lead_time,Resort$adr, ylab = "adr")
plot(Resort$stays_in_weekend_nights, Resort$adr, ylab = "adr")
plot(Resort$stays_in_week_nights, Resort$adr, ylab = "adr")
plot(Resort$total_of_special_requests, Resort$adr, ylab = "adr", xlab = "total_of_special_requests")
par(mfrow = c(2,2))
plot(Resort$lead_time,Resort$adr, ylab = "adr", xlab = "lead_time")
plot(Resort$stays_in_weekend_nights, Resort$adr, ylab = "adr", xlab = "stays_in_weekend_nights")
plot(Resort$stays_in_week_nights, Resort$adr, ylab = "adr", xlab = "stays_in_week_nights")
plot(Resort$total_of_special_requests, Resort$adr, ylab = "adr", xlab = "total_of_special_requests")
title("Figure 1", line = -1, outer = T)
