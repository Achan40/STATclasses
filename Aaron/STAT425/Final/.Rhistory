library(faraway)
library(randomForest)
library(car)
library(leaps)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#Testing Non-linearity
#Figure 1
par(mfrow = c(2,2))
plot(Resort$lead_time,Resort$adr, ylab = "adr", xlab = "lead_time")
plot(Resort$stays_in_weekend_nights, Resort$adr, ylab = "adr", xlab = "stays_in_weekend_nights")
plot(Resort$stays_in_week_nights, Resort$adr, ylab = "adr", xlab = "stays_in_week_nights")
plot(Resort$total_of_special_requests, Resort$adr, ylab = "adr", xlab = "total_of_special_requests")
title("Figure 1", line = -1, outer = T)
#Model creation
#Simple model with interation term (base model)
mod1 = glm(is_canceled ~ ., data = Resort, family = binomial)
summary(mod1)
plot(mod1)
#Residuals vs Fitted shows that we can assume a linear relationship between explanatory variables and the response
#Normal QQ plot shows our residuals are not exactly normal, perform shapiro test to be sure
shapiro.test(residuals(mod1))
#The result of sharpio-wilks testing H0 = data is normally distributed vs Ha = data is not normally distributed, shows we reject H0, data is not normally distributed. May have to perform transformation of our data
#Scale-Location plot shows variance is not homogenous, may need to perform a transformation
#Residuals vs Leverage plot shows that we have some high leverage points, some exceed 3 standard deviations, we may have to remove them top get a better model, could be a result of non-normality in our data
#influential points
plot(mod1,4)
#collinearity
vif(mod1)
#Model using backward regression w/ AIC and with interaction terms
mod2 = glm(is_canceled ~ . - children - babies + adults:children + adults:babies,data = Resort, family = binomial)
mod.back = step(mod2, direction = "backward")
summary(mod.back)
plot(mod.back)
#Residuals vs Fitted shows that we can assume a linear relationship between explanatory variables and the response
#Normal QQ plot shows our residuals are not exactly normal, perform shapiro test to be sure
shapiro.test(residuals(mod.back))
#The result of sharpio-wilks testing H0 = data is normally distributed vs Ha = data is not normally distributed, shows we reject H0, data is not normally distributed. May have to perform transformation of our data
#Scale-Location plot shows variance is not homogenous, may need to perform a transformation
#Residuals vs Leverage plot shows that we have some high leverage points, some exceed 3 standard deviations, we may have to remove them top get a better model, could be a result of non-normality in our data
#influential points
plot(mod.back,4)
#collinearity
vif(mod2)
#Train Test Split for Prediction
set.seed(100)
trainInt = sample(1:nrow(Resort), .6*nrow(Resort))
train = Resort[trainInt,]
test = Resort[-trainInt,]
#Calculate accuracy of the model
prob = predict(mod2, test, type = "response")
predClass = ifelse(prob > .5, 1, 0)
mean(predClass == test$is_canceled)
r2mod = regsubsets(is_canceled ~ . - children - babies + adults:children + adults:babies,data = Resort)
r2s = summary(r2mod)
r2s$which
msize = 2:9
r2s$which[which.max(r2s$adjr2),]
selectVar = colnames(r2s$which)[r2s$which[which.max(r2s$adjr2),]]
selectVar = selectVar[-1]
selectVar
#Mallow's CP to determine significant variables
r2s$which[which.min(r2s$cp),]
selectVar = colnames(r2s$which)[r2s$which[which.min(r2s$cp),]]
selectVar = selectVar[-1]
selectVar
#Split into train and validation data (70/30)
trainInt = sample(1:nrow(Resort), .6*nrow(Resort))
train = Resort[trainInt,]
test = Resort[-trainInt,]
#Starting Model
mlMod = randomForest(is_canceled ~ ., data = Resort, subset = trainInt)
mlMod
test.acc = double(10)
#mtry is the number of variables randomly chosen at each split
for(mtry in 1:10)
{
rf = randomForest(is_canceled ~ . , data = Resort, subset = trainInt, mtry = mtry,ntree = 400)
prob.rf = predict(rf,test,type = "response") #Predictions on Test Set for each Tree
test.acc[mtry] = with(test, mean(is_canceled == prob.rf)) #Mean Squared Test Error
}
test.acc
#minmize MSE at mtry = 5
max(test.acc)
mlMod2 = randomForest(is_canceled ~ . - children - babies + adults:children + adults:babies, data = Resort, subset = trainInt, mtry = 5,ntree = 400)
mlMod2
plot(mod1)
mlMod
#Residuals vs Fitted shows that we can assume a linear relationship between explanatory variables and the response
#Normal QQ plot shows our residuals are not exactly normal, perform shapiro test to be sure
#The result of sharpio-wilks testing H0 = data is normally distributed vs Ha = data is not normally distributed, shows we reject H0, data is not normally distributed. May have to perform transformation of our data
#Scale-Location plot shows variance is not homogenous, may need to perform a transformation
#Residuals vs Leverage plot shows that we have some high leverage points, some exceed 3 standard deviations, we may have to remove them top get a better model, could be a result of non-normality in our data
#influential points
plot(mod1,4)
install.packages("broom")
mydata = Resort %>% dplyr::select_if(is.numeric)
library(tidyverse)
library(broom)
library(faraway)
library(randomForest)
library(car)
library(leaps)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
mydata = Resort %>% dplyr::select_if(is.numeric)
predictors = colnames(mydata)
library(tidyverse)
library(broom)
library(faraway)
library(randomForest)
library(car)
library(leaps)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#model
mod1 = glm(is_canceled ~ ., data = Resort, family = binomial)
#prediction
probabilities = predict(mod1, type = "response")
predicted.classes = ifelse(probabilities > .5, 1, 0)
# Select only numeric predictors
mydata = Resort %>% dplyr::select_if(is.numeric)
predictors = colnames(mydata)
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
#model
mod1 = glm(is_canceled ~ . - children - babies + adults:children + adults:babies, data = Resort, family = binomial)
#prediction
probabilities = predict(mod1, type = "response")
predicted.classes = ifelse(probabilities > .5, 1, 0)
# Select only numeric predictors
mydata = Resort %>% dplyr::select_if(is.numeric)
predictors = colnames(mydata)
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
Resort$is_canceled = as.factor(c(Resort$is_canceled, Resort$adults, Resort$children, Resort$babies, Resort$total_of_special_requests)
Resort$is_canceled = as.factor(c(Resort$is_canceled, Resort$adults, Resort$children, Resort$babies, Resort$total_of_special_requests))
Resort$is_canceled = as.factor(c(Resort$is_canceled, Resort$adults, Resort$children, Resort$babies, Resort$total_of_special_requests))
library(tidyverse)
library(broom)
library(faraway)
library(randomForest)
library(car)
library(leaps)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(c(Resort$is_canceled, Resort$adults, Resort$children, Resort$babies, Resort$total_of_special_requests))
library(tidyverse)
library(broom)
library(faraway)
library(randomForest)
library(car)
library(leaps)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#model
mod1 = glm(adr ~ . - children - babies + adults:children + adults:babies, data = Resort)
#prediction
probabilities = predict(mod1, type = "response")
# Select only numeric predictors
mydata = Resort %>% dplyr::select_if(is.numeric)
predictors = colnames(mydata)
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = probabilities) %>%
gather(key = "predictors", value = "predictor.value", -logit)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#model
mod1 = glm(adr ~ . - children - babies + adults:children + adults:babies, data = Resort)
#prediction
probabilities = predict(mod1, type = "response")
# Select only numeric predictors
mydata = Resort %>% dplyr::select_if(is.numeric)
predictors = colnames(mydata)
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = probabilities) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#model
mod1 = glm(is_canceled ~ ., data = Resort, family = binomial)
#prediction
probabilities = predict(mod1, type = "response")
predicted.classes = ifelse(probabilities > .5, 1, 0)
# Select only numeric predictors
mydata = Resort %>% dplyr::select_if(is.numeric)
predictors = colnames(mydata)
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
#model
mod1 = glm(is_canceled ~ .  + lead_time^3, data = Resort, family = binomial)
#prediction
probabilities = predict(mod1, type = "response")
predicted.classes = ifelse(probabilities > .5, 1, 0)
# Select only numeric predictors
mydata = Resort %>% dplyr::select_if(is.numeric)
predictors = colnames(mydata)
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
#Influential values
plot(model, which = 4)
#Influential values
plot(mod1, which = 4)
model.data <- augment(mod1) %>%
mutate(index = 1:n())
model.data %>% top_n(3, .cooksd)
ggplot(model.data, aes(index, .std.resid)) +
geom_point(aes(color = diabetes), alpha = .5) +
theme_bw()
ggplot(model.data, aes(index, .std.resid)) +
geom_point(aes(color = is_canceled), alpha = .5) +
theme_bw()
plot(mod1)
library(tidyverse)
library(broom)
library(faraway)
library(randomForest)
library(car)
library(leaps)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#model
mod1 = glm(is_canceled ~ ., data = Resort, family = binomial)
#prediction
probabilities = predict(mod1, type = "response")
predicted.classes = ifelse(probabilities > .5, 1, 0)
#Create scatter plots to test for linearity
# Select only numeric predictors
mydata = Resort %>% dplyr::select_if(is.numeric)
predictors = colnames(mydata)
# Bind the logit and tidying the data for plot
mydata <- mydata %>%
mutate(logit = log(probabilities/(1-probabilities))) %>%
gather(key = "predictors", value = "predictor.value", -logit)
ggplot(mydata, aes(logit, predictor.value))+
geom_point(size = 0.5, alpha = 0.5) +
geom_smooth(method = "loess") +
theme_bw() +
facet_wrap(~predictors, scales = "free_y")
#Influential values
plot(mod1, which = 4)
ggplot(model.data, aes(index, .std.resid)) +
geom_point(aes(color = diabetes), alpha = .5) +
theme_bw()
model.data <- augment(mod1) %>%
mutate(index = 1:n())
ggplot(model.data, aes(index, .std.resid)) +
geom_point(aes(color = diabetes), alpha = .5) +
theme_bw()
ggplot(model.data, aes(index, .std.resid)) +
geom_point(aes(color = is_canceled), alpha = .5) +
theme_bw()
plot(mod1)
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#Testing Non-linearity
#Figure 1
par(mfrow = c(2,2))
plot(Resort$lead_time,Resort$adr, ylab = "adr", xlab = "lead_time")
plot(Resort$stays_in_weekend_nights, Resort$adr, ylab = "adr", xlab = "stays_in_weekend_nights")
plot(Resort$stays_in_week_nights, Resort$adr, ylab = "adr", xlab = "stays_in_week_nights")
plot(Resort$total_of_special_requests, Resort$adr, ylab = "adr", xlab = "total_of_special_requests")
title("Figure 1", line = -1, outer = T)
#Model creation
#Simple model with interation term (base model)
mod1 = glm(is_canceled ~ ., data = Resort, family = binomial)
summary(mod1)
par(mfrow = c(2,2))
plot(mod1)
title("Figure 2", line = -1, outer = T)
#Residuals vs Fitted shows that we can assume a linear relationship between explanatory variables and the response
#Normal QQ plot shows our residuals are not exactly normal, perform shapiro test to be sure
#The result of sharpio-wilks testing H0 = data is normally distributed vs Ha = data is not normally distributed, shows we reject H0, data is not normally distributed. May have to perform transformation of our data
#Scale-Location plot shows variance is not homogenous, may need to perform a transformation
#Residuals vs Leverage plot shows that we have some high leverage points, some exceed 3 standard deviations, we may have to remove them top get a better model, could be a result of non-normality in our data
#influential points
par(mfrow = c(1,1))
plot(mod1,4)
title("Figure 2.1", line = -1, outer = T)
#Model using backward regression w/ AIC and with interaction terms
mod2 = glm(is_canceled ~ . - children - babies + adults:children + adults:babies,data = Resort, family = binomial)
mod.back = step(mod2, direction = "backward")
summary(mod.back)
par(mfrow = c(2,2))
plot(mod.back)
title("Figure 3", line = -1, outer = T)
#Residuals vs Fitted shows that we can assume a linear relationship between explanatory variables and the response
#Normal QQ plot shows our residuals are not exactly normal, perform shapiro test to be sure
#The result of sharpio-wilks testing H0 = data is normally distributed vs Ha = data is not normally distributed, shows we reject H0, data is not normally distributed. May have to perform transformation of our data
#Scale-Location plot shows variance is not homogenous, may need to perform a transformation
#Residuals vs Leverage plot shows that we have some high leverage points, some exceed 3 standard deviations, we may have to remove them top get a better model, could be a result of non-normality in our data
#influential points
par(mfrow = c(1,1))
car::vif(model)
car::vif(mod1)
#Testing Non-linearity
par(mfrow = c(2,2))
plot(Resort$lead_time,Resort$adr, ylab = "adr", xlab = "lead_time")
plot(Resort$stays_in_weekend_nights, Resort$adr, ylab = "adr", xlab = "stays_in_weekend_nights")
plot(Resort$stays_in_week_nights, Resort$adr, ylab = "adr", xlab = "stays_in_week_nights")
plot(Resort$total_of_special_requests, Resort$adr, ylab = "adr", xlab = "total_of_special_requests")
Resort$time = 1:nrow(Resort)
View(Resort)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#Testing Non-linearity
par(mfrow = c(2,2))
Time = 1:nrow(Resort)
plot(Resort$lead_time,Time, ylab = "adr", xlab = "lead_time")
plot(Resort$stays_in_weekend_nights, Time, ylab = "adr", xlab = "stays_in_weekend_nights")
plot(Resort$stays_in_week_nights, Time, ylab = "adr", xlab = "stays_in_week_nights")
plot(Resort$total_of_special_requests, Time ylab = "adr", xlab = "total_of_special_requests")
plot(Resort$total_of_special_requests, Time, ylab = "adr", xlab = "total_of_special_requests")
.
library(faraway)
library(randomForest)
library(car)
library(leaps)
setwd("/Users/chanm/Desktop/STATclasses/Aaron/STAT425/Final")
Resort = data.frame(read.csv(file = "stat425_fpdata.csv",header = T))
#Select only the data for Section 1
Resort = Resort[Resort$hotel == "Resort Hotel",]
#Exploratory Analysis
#Remove unneccsary time variables as well as uneccesarry variables
Resort = subset(Resort, select = -c(arrival_date_year, arrival_date_week_number, arrival_date_day_of_month, hotel, reserved_room_type, meal, market_segment, customer_type))
Resort$is_canceled = as.factor(Resort$is_canceled)
#Testing Non-linearity
#Figure 1
par(mfrow = c(2,2))
plot(Resort$lead_time,Resort$adr, ylab = "adr", xlab = "lead_time")
plot(Resort$stays_in_weekend_nights, Resort$adr, ylab = "adr", xlab = "stays_in_weekend_nights")
plot(Resort$stays_in_week_nights, Resort$adr, ylab = "adr", xlab = "stays_in_week_nights")
plot(Resort$total_of_special_requests, Resort$adr, ylab = "adr", xlab = "total_of_special_requests")
title("Figure 1", line = -1, outer = T)
#Model creation
#Simple model with interation term (base model)
mod1 = glm(adr ~ ., data = Resort)
summary(mod1)
plot(mod1)
title("Figure 2", line = -1, outer = T)
#Residuals vs Fitted shows that we can assume a linear relationship between explanatory variables and the response
#Normal QQ plot shows our residuals are not exactly normal, perform shapiro test to be sure
shapiro.test(residuals(mod1))
#The result of sharpio-wilks testing H0 = data is normally distributed vs Ha = data is not normally distributed, shows we reject H0, data is not normally distributed. May have to perform transformation of our data
#Scale-Location plot shows variance is not homogenous, may need to perform a transformation
#Residuals vs Leverage plot shows that we have some high leverage points, some exceed 3 standard deviations, we may have to remove them top get a better model, could be a result of non-normality in our data
#influential points
par(mfrow = c(1,1))
plot(mod1,4)
title("Figure 2.1", line = -1, outer = T)
#collinearity
vif(mod1)
#Model using backward regression w/ AIC and with interaction terms
mod2 = glm(adr ~ . - children - babies + adults:children + adults:babies,data = Resort)
mod.back = step(mod2, direction = "backward")
summary(mod.back)
par(mfrow = c(2,2))
plot(mod.back)
title("Figure 3", line = -1, outer = T)
#Residuals vs Fitted shows that we can assume a linear relationship between explanatory variables and the response
#Normal QQ plot shows our residuals are not exactly normal, perform shapiro test to be sure
shapiro.test(residuals(mod.back))
#The result of sharpio-wilks testing H0 = data is normally distributed vs Ha = data is not normally distributed, shows we reject H0, data is not normally distributed. May have to perform transformation of our data
#Scale-Location plot shows variance is not homogenous, may need to perform a transformation
#Residuals vs Leverage plot shows that we have some high leverage points, some exceed 3 standard deviations, we may have to remove them top get a better model, could be a result of non-normality in our data
#influential points
par(mfrow = c(1,1))
plot(mod.back,4)
title("Figure 3.1", line = -1, outer = T)
#collinearity
vif(mod2)
#Adjusted R-square to determine significant variables
r2mod = regsubsets(adr ~ . - children - babies + adults:children + adults:babies,data = Resort)
r2s = summary(r2mod)
r2s$which
msize = 2:9
r2s$which[which.max(r2s$adjr2),]
selectVar = colnames(r2s$which)[r2s$which[which.max(r2s$adjr2),]]
selectVar = selectVar[-1]
selectVar
#Mallow's CP to determine significant variables
r2s$which[which.min(r2s$cp),]
selectVar = colnames(r2s$which)[r2s$which[which.min(r2s$cp),]]
selectVar = selectVar[-1]
selectVar
#Train Test Split for Prediction 60/40
set.seed(10)
trainInt = sample(1:nrow(Resort), .6*nrow(Resort))
train = Resort[trainInt,]
test = Resort[-trainInt,]
#Calculate MSE for the accuracy of the model
pred = predict(mod2, test)
test.err = with(test, mean((adr - pred)^2))
test.err
#Split into train and validation data 60/40
trainInt = sample(1:nrow(Resort), .6*nrow(Resort))
train = Resort[trainInt,]
test = Resort[-trainInt,]
#Starting Model
mlMod = randomForest(adr ~ ., data = Resort, subset = trainInt)
mlMod
#plotting error vs number of trees
plot(mlMod)
test.err = double(10)
#mtry is the number of variables randomly chosen at each split
for(mtry in 1:10)
{
rf = randomForest(adr ~ . , data = Resort, subset = trainInt, mtry = mtry,ntree = 400)
pred = predict(rf,test) #Predictions on Test Set for each Tree
test.err[mtry] = with(test, mean((adr - pred)^2)) #Mean Squared Test Error
}
test.err
#minmize MSE at mtry =
min(test.err)
