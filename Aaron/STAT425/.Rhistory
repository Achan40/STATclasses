#Problem 1
library(faraway)
data("sat")
head(sat)
#a
sat_model1 = lm(total ~ expend+ratio+salary,data = sat)
summary(sat_model1)
mod1sum$coef[4,1]
mod1sum = summary(sat_model1)
mod1sum$coef[4,1]
mod1sum$coef[4,2]
#a
sat_model1 = lm(total ~ expend+ratio+salary,data = sat)
mod1sum = summary(sat_model1)
#H0: Bsalary = 0
tStat= (mod1sum$coef[4,1]-0)/mod1sum$coef[4,2]#Bsalaryhat and its sterror
pVal= dt(tStat,df=3)
pVal
#H0: Bsalary=Bratio=Bexpend=0
summary(mod1)$fstat
#H0: Bsalary=Bratio=Bexpend=0
summary(sat_model1)$fstat
summary(sat_model1)$pval
summary(sat_model1)$p.val
ls(summary(sat_model1))
summary(sat_model1)$sigma
summary(sat_model1)$call
#b
sat_model2 = lm(total ~ expend+ratio+salary+takers,data = sat)
summary(sat_model2)
mod2sum = summary(sat_model2)
#H0: Btakers = 0
tStat2= (mod2sum$coef[5,1]-0)/mod2sum$coef[5,2]#Btakershat and its sterror
#H0: Btakers = 0
mod2sum$df
mod2sum = summary(sat_model2)
#H0: Btakers = 0
tStat2= (mod2sum$coef[5,1]-0)/mod2sum$coef[5,2]#Btakershat and its sterror
pVal2= dt(tStat2,df=4)
pVal2
#total=1069.234+16.469*expend+6.330*ratio-8.823*salary
#H0: Bsalary=0
length(sat)
#a
sat_model1 = lm(total ~ expend+ratio+salary,data = sat)
mod1sum = summary(sat_model1)
#H0: Bsalary = 0
tStat= (mod1sum$coef[4,1]-0)/mod1sum$coef[4,2]#Bsalaryhat and its sterror
pVal= dt(tStat,df=length(sat)-1)
pVal
#H0: Bsalary=Bratio=Bexpend=0
summary(sat_model1)
#b
sat_model2 = lm(total ~ expend+ratio+salary+takers,data = sat)
mod2sum = summary(sat_model2)
#H0: Btakers = 0
tStat2= (mod2sum$coef[5,1]-0)/mod2sum$coef[5,2]#Btakershat and its sterror
pVal2= dt(tStat2,df=length(sat)-1)
pVal2
#Part B
mod2= lm(total~expend+ratio+salary+takers, data=sat)
#H0: Btakers=0
summary(mod2)
t.1= (-2.9045-0)/0.2313
t.1
p.value1= dt(t,df=length(sat)-1)
p.value1
p.value1= dt(t.1,df=length(sat)-1)
p.value1
t= (-8.823-0)/4.697
p.value1= dt(t,df=length(sat)-1)
p.value1
#Reject H0 at alpha=0.05
#The new model has a p-value that is essentially 0 even with an extra variable, meaning that it is better than the first model
#the Ftest is the Ttest squared
tStat2^2
anova(mod2)
anova(mod2)$coef[4,4]
anova(mod2)$coef
ls(anova(mod2))
anova(mod2)$fvalue
anova(mod2)$"F value"
anova(mod2)$"F value"[4]
#Reject H0 at alpha=0.05
#The new model has a p-value that is essentially 0 even with an extra variable, meaning that it is better than the first model
#the Ftest is the Ttest squared
tStat2^2
#c
library(ellipse)
library(ggplot2)
CR95 = ellipse(pro_model1,c(4,5))#create confidence region for age&lbph
myCR = data.frame(CR95);
names(myCR) = c("age","lbph");
myCR[,'level']=as.factor(rep(.95,dim(CR95)[1]));
ggplot(data=myCR, aes(x=age, y=lbph, colour=level)) +
geom_path(aes(linetype=level), size=1.5) +
geom_point(x=coef(pro_model1)[4], y=coef(pro_model1)[5], shape=3, size=3, colour='red') +
geom_point(x=0, y=0, shape=1, size=3, colour='red')
myCR = data.frame(CR95);
CR95 = ellipse(pro_model1,c(4,5))#create confidence region for age&lbph
#Problem 2
data("prostate")
head(prostate)
pro_model1 = lm(lpsa~.,data = prostate)
#a
confint(pro_model1,'age',level=.90)
confint(pro_model1,'age',level=.95)
#b
summary(pro_model1)#remove age,lbph,lcp,gleason,pgg45
pro_model2 = lm(lpsa ~ lcavol+lweight+svi,data = prostate)
summary(pro_model2)
#c
library(ellipse)
library(ggplot2)
CR95 = ellipse(pro_model1,c(4,5))#create confidence region for age&lbph
myCR = data.frame(CR95);
names(myCR) = c("age","lbph");
myCR[,'level']=as.factor(rep(.95,dim(CR95)[1]));
ggplot(data=myCR, aes(x=age, y=lbph, colour=level)) +
geom_path(aes(linetype=level), size=1.5) +
geom_point(x=coef(pro_model1)[4], y=coef(pro_model1)[5], shape=3, size=3, colour='red') +
geom_point(x=0, y=0, shape=1, size=3, colour='red')
#d
#permutation test corresponding to the t-test for age
n.iter = 2000;
tstats = numeric(n.iter);
for(i in 1:n.iter){
newprostate=prostate;
newprostate[,c(4)]=savings[sample(97),c(4)];
g = lm(lpsa ~., data=newprostate);
tstats[i] = summary(g)$coef[4,3]
}
length(tstats[tstats > summary(pro_model1)$coef[4,3]])/n.iter
#a
data("punting")
head(punting)
punt_model1 = lm(Distance ~ RStr+LStr+RFlex+LFlex,data = punting)
summary(punt_model1)
#b
qf(.95,4,8)
summary(punt_model1)$fstat
?qt()
qt(.975,df=length(punting)-1,lower.tail=TRUE)
qt(.95,df=length(punting)-1,lower.tail=TRUE)
qt(.025,df=length(punting)-1,lower.tail=TRUE)
qt(.025,df=length(punting)-1,lower.tail=TRUE)
qt(.975,df=length(punting)-1,lower.tail=TRUE)
qt(.95,df=length(punting)-1,lower.tail=TRUE)
qt(.5,df=length(punting)-1,lower.tail=TRUE)
qt(.05,df=length(punting)-1,lower.tail=TRUE)
summary(punt_model1)
qt(.025,df=length(punting)-1,lower.tail=TRUE)
qt(.975,df=length(punting)-1,lower.tail=TRUE)
qt(.95,df=length(punting)-1,lower.tail=TRUE)
qt(.05,df=length(punting)-1,lower.tail=TRUE)
qt(.90,df=length(punting)-1,lower.tail=TRUE)
qt(.10,df=length(punting)-1,lower.tail=TRUE)
qt(.90,df=length(punting)-1,lower.tail=Fase)
qt(.90,df=length(punting)-1,lower.tail=False)
qt(.90,df=length(punting)-1,lower.tail=FALSE)
qt(.90,df=length(punting)-1,lower.tail=TRUE)
#c
#H0: RStr = LStr
RStrmu= mean(punting$RStr)
RStrsd= sd(punting$RStr)
LStrmu= mean(punting$LStr)
LStrsd= sd(punting$LStr)
n1= length(punting$RStr)
n2= length(punting$LStr)
sPooledsq= (((n1-1)*RStrsd^2)+((n2-1)*LStrsd^2))/(n1+n2-2)
tvalPool= (RStrmu-LStrmu)/(sqrt(sPooledsq*((1/n1)+(1/n2))))
tvalPool
pvalPool= dt(t.val, df=n1+n2-2)
pvalPool
pvalPool= dt(tvalPool, df=n1+n2-2)
pvalPool
#d
CR95 = ellipse(punt_model1,c(2,3))#create confidence region for age&lbph
myCR = data.frame(CR95);
names(myCR) = c("RStr","LStr");
myCR[,'level']=as.factor(rep(.95,dim(CR95)[1]));
ggplot(data=myCR, aes(x=RStr, y=LStr, colour=level)) +
geom_path(aes(linetype=level), size=1.5) +
geom_point(x=coef(punt_model1)[4], y=coef(punt_model1)[5], shape=3, size=3, colour='red') +
geom_point(x=0, y=0, shape=1, size=3, colour='red')
#e
punt_model2 = lm(Distance ~ I(RStr+LStr)+RFlex+LFlex,data = punting)
summary(punt_model2)
#a
pro_model3 = lm(lpsa ~.,data = prostate)
predictdata = data.frame(lcavol=1.44692,lweight=3.62301,age=65,lbph=.3001,svi=0,lcp=-.79851,gleason=7,pgg45=15)
predict(pro_model3,predictdata,interval = "confidence",level = .95)
#b
predictdata2 = data.frame(lcavol=1.44692,lweight=3.62301,age=20,lbph=.3001,svi=0,lcp=-.79851,gleason=7,pgg45=15)
predict(pro_model3,predictdata2,interval = "confidence",level = .95)
#c
summary(pro_model3)#remove age,lbph,lcp,gleason,pgg45
pro_model4 = lm(lpsa ~ lcavol+lweight+svi,data = prostate)
predictdata = data.frame(lcavol=1.44692,lweight=3.62301,svi=0)
predict(pro_model4,predictdata,interval = "confidence",level = .95)
predict(pro_model3,predictdata,interval = "confidence",level = .95)
predict(pro_model3,predictdata2,interval = "confidence",level = .95)
predict(pro_model4,predictdata,interval = "confidence",level = .95)
#a
pro_model3 = lm(lpsa ~.,data = prostate)
predictdata = data.frame(lcavol=1.44692,lweight=3.62301,age=65,lbph=.3001,svi=0,lcp=-.79851,gleason=7,pgg45=15)
predict(pro_model3,predictdata,interval = "confidence",level = .95)
#b
predictdata2 = data.frame(lcavol=1.44692,lweight=3.62301,age=20,lbph=.3001,svi=0,lcp=-.79851,gleason=7,pgg45=15)
predict(pro_model3,predictdata2,interval = "confidence",level = .95)
#c
summary(pro_model3)#remove age,lbph,lcp,gleason,pgg45
pro_model4 = lm(lpsa ~ lcavol+lweight+svi,data = prostate)
predictdata = data.frame(lcavol=1.44692,lweight=3.62301,svi=0)
predict(pro_model4,predictdata,interval = "confidence",level = .95)
#a
pro_model3 = lm(lpsa ~.,data = prostate)
predictdata = data.frame(lcavol=1.44692,lweight=3.62301,age=65,lbph=.3001,svi=0,lcp=-.79851,gleason=7,pgg45=15)
predict(pro_model3,predictdata,interval = "confidence",level = .95)
#b
predictdata2 = data.frame(lcavol=1.44692,lweight=3.62301,age=20,lbph=.3001,svi=0,lcp=-.79851,gleason=7,pgg45=15)
predict(pro_model3,predictdata2,interval = "confidence",level = .95)
#c
summary(pro_model3)#remove age,lbph,lcp,gleason,pgg45
pro_model4 = lm(lpsa ~ lcavol+lweight+svi,data = prostate)
predictdata = data.frame(lcavol=1.44692,lweight=3.62301,svi=0)
predict(pro_model4,predictdata,interval = "confidence",level = .95)
